import time
from selenium import webdriver
import pandas as pd
import sqlite3
import random
from selenium.webdriver.chrome.options import Options


def initUserAgent(user_agent):
    user_agent_list = [
        # Chrome
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        # 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        # 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        # Firefox on Desktop User Agents
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0'
        # 'Mozilla/5.0 (X11; Linux i686; rv:78.0) Gecko/20100101 Firefox/78.0',
        # 'Mozilla/5.0 (Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0',
        # 'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:78.0) Gecko/20100101 Firefox/78.0',
        # 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0',
        # 'Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0'
    ]
    # Pick a random user agent
    if user_agent == '':
        userAgent = random.choice(user_agent_list)
    else:
        userAgent = user_agent
    options = Options()
    print('userAgent: ' + userAgent)
    options.add_argument(f'user-agent={userAgent}')
    # /home/aum49/Documents/ScrapingVulnerabilityData/chromedriver(ver84)/chromedriver
    driverpath = '/home/aum49/Documents/ScrapingVulnerabilityData/chromedriver(ver84)/chromedriver'
    driver = webdriver.Chrome(chrome_options=options, executable_path=driverpath)
    return driver


def getAcknowledgedCve():
    url_Acknowledgement = 'https://portal.msrc.microsoft.com/en-us/security-guidance/acknowledgments'
    print('\nfind the last acknowledgement data :' + url_Acknowledgement)
    Driver = initUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0')
    Driver.get(url_Acknowledgement)
    time.sleep(2)
# sample data
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[2]/td[1] #name#
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[2]/td[2]/a #link#
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[3]/td[1] #name#
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[3]/td[2]/a #link#
#   ... ( tr[1] is last acknowledgment )
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[113]/td[2]/a
#
# //*[@id="acknowledgment-table-tbody"]/tr[2]/td/table/tbody/tr[3]/td[2]/a
# //*[@id="acknowledgment-table-tbody"]/tr[2]/td/table/tbody/tr[4]/td[2]/a
#   ... ( tr[2] was old acknowledgment )
# //*[@id="acknowledgment-table-tbody"]/tr[2]/td/table/tbody/tr[111]/td[2]/a
    Acknowledgment_For = ' '
    try:
        # //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[1]/td/strong
        # //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[1]/td/strong
        Acknowledgment_For = Driver.find_element_by_xpath('//*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[1]/td/strong').text
        print('Acknowledgment ' + Acknowledgment_For)
    except:
        print("Error link Acknowledgment.")
    Month_Name = Acknowledgment_For
    MonthName = str(Acknowledgment_For).replace(' ', '')
    TableName = 'Acknowledgment_' + MonthName
    Acknowledgment = []
    for k in range(1, 150):
        try:
            CveNumber = Driver.find_element_by_xpath('//*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[' + str(k+1) + ']/td[2]/a').text
            CveName = Driver.find_element_by_xpath('//*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[' + str(k+1) + ']/td[1]').text
            # Char '&' in string can push a data after that in to next column of the DataFrame
            CveName = str(CveName).replace(' & ', ' ')
            CveLink = Driver.find_element_by_xpath('//*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[' + str(k+1) + ']/td[2]/a').get_attribute('href')
            print(str(k) + '.) ' + CveNumber +'  '+ CveName)
            print('    ' + CveLink)
            Acknowledgment.append(CveNumber + '&' + CveName + '&' + CveLink)
        except:
            print("END of last Acknowledgment.")
            break
    df = pd.DataFrame(columns=['CveNumber', 'CveName', 'CveLink'])
    for i in range(0, len(Acknowledgment)):
        Acknowledgments = str(Acknowledgment[i]).split('&')
        df = df.append({
            'CveNumber': Acknowledgments[0],
            'CveName': Acknowledgments[1],
            'CveLink': Acknowledgments[2]
        }, ignore_index=True)
    time.sleep(2)
    df.to_sql(TableName, con=conn, if_exists='replace')
    Driver.close()
    return Month_Name


def SearchPlugin(searchname, tablename):
    url = 'https://www.tenable.com/plugins/nessus/families/Windows%20%3A%20Microsoft%20Bulletins'
    Driver.get(url)
    time.sleep(2)
    # print('Url :' + url)
    # sample data
    # //*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[1]/td[2] #name#
    # //*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[1]/td[1]/a #link#
    # ...
    # //*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[2]/td[2] #name#
    # //*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[2]/td[1]/a #link#
    # ...
    df = pd.DataFrame(columns=['PluginName', 'PluginLink'])
    for k in range(1, 30):
        try:
            plugin_name = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[' + str(k) + ']/td[2]')\
                .text
            plugin_link = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[' + str(k) + ']/td[1]/a')\
                .get_attribute(
                'href')
            if searchname in plugin_name:
                print('PluginName: ' + plugin_name)
                print('PluginLink: ' + plugin_link)
                df = df.append({
                    'PluginName': plugin_name,
                    'PluginLink': plugin_link
                }, ignore_index=True)
        except:
            print("END of Search Plugin")
            break
    time.sleep(2)
    df.to_sql(tablename, con=conn, if_exists='replace')


def getPluginLink(tablename):
    query = "select * from "+ tablename + MonthName + ";"
    df_all = pd.read_sql_query(query, conn)
    Link = []
    for i in range(0, len(df_all['PluginLink'])):
        Link.append(df_all['PluginLink'].get(i))
    print(str(Link))
    return Link


def getPluginDetail(url):
    Driver.get(url)
    time.sleep(3)
# sample data
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span[4] #Des.#
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span[5] #Des.#
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span[6] #Des.#
# ...
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span[153] #Des.#
#
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/section[1]/p/span[1]/a
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/section[1]/p/span[2]/a
# ...
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/section[1]/p/span[100]/a
    ProductName = ''
    try:
        st = Driver.find_element_by_xpath('//*[@id="__next"]/div/div[3]/div/div/div/h1').text
        if ':' in st:
            name1, name2 = str(st).split(': ')
            name = str(name2).replace(' Security Update', '').replace(' June 2020', '').strip('s').strip('for').strip()
        else:
            name = str(st).replace('Security Updates for ', '').replace(' (June 2020)', '')
        ProductName = name
        print('Product Name: ' + ProductName)
    except:
        print('Error link MSKB Plugin')
    CveDetail = ''
    for k in range(1, 200):
        try:
            cvedescript = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span['
                + str(k) + ']').text
            CveDetail += cvedescript + '\n'
        except:
            print("Reading a Plugin Description")
            break
    print('All CVE Description:')
    print(CveDetail)
    CveNumber = []
    for k in range(1, 150):
        try:
            cveno = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/section[1]/p/span['
                + str(k) + ']/a').text
            CveNumber.append(cveno)
        except:
            print("Reading all CVE")
            break
    print('all CVE is: ' + str(CveNumber))
    KbNumber = []
    for k in range(1, 10):
        try:
            kbnum = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/div/section[1]/p/span['
                + str(k) + ']/a').text
            KbNumber.append('KB'+ kbnum)
        except:
            print("Reading all KB")
            break
    print('all BK is: ' + str(KbNumber))
    UpDate = []
    for kbnum in KbNumber:
        update = 'https://www.catalog.update.microsoft.com/Search.aspx?q=' + kbnum
        UpDate.append(update)
    print('all Update is:' + str(UpDate))
    time.sleep(2)
    return ProductName, str(KbNumber).strip('[]').replace("'", ''), \
           str(UpDate).strip('[]').replace("'", ''), \
           CveDetail, str(CveNumber).strip('[]').replace("'", '')


def putDFToSql(df, tablename):
    df.to_sql(tablename, con=conn, if_exists='replace')


def getAllCveNumber():
    # Find All CVE from (All)__Detail that list in each a Product
    filename_read = ['Kb','SharePoint','Office','IE']
    St0 = []
    for i in range(0, len(filename_read)):
        query = "select * from " + filename_read[i] + "Details_" + MonthName + ";"
        print('\nReading All CVE in ' + filename_read[i] + "Details_" + MonthName + ' Table')
        df1 = pd.read_sql_query(query, conn)
        for j in range(0, len(df1)):
            St0.extend(str(df1['CVE_Number'].get(j)).split(', '))
    St0 = list(dict.fromkeys(St0))
    print('\nall CVE in all Product Detail file:')
    print(str(St0).strip('[]').replace("'",'') + '\n')
    return St0


def getLostCveNumbers():
    # Find All Lost CVE from CveDetails_ that list in each a Product
    St0 = []
    query = "select * from CveDetails_" + MonthName + ";"
    print('\nReading All Lost CVE in CveDetails_' + MonthName + ' Table')
    df1 = pd.read_sql_query(query, conn)
    for i in range(0, len(df1)):
        if str(df1['CveName'].get(i)) == '':
            St0.append(str(df1['CveNo'].get(i)))
    print(St0)
    return St0



def getTenableCveDetail(url):
    Driver.get(url)
    time.sleep(3)
# sample data
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[5]/p/strong #Base Score#
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[5]/p/span
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[6]/p/strong #Vector#
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[6]/p/span
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[7]/p/strong #Impact Score#
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[7]/p/span
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[8]/p/strong #Impact Score#
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[8]/p/span
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[9]/p/strong #Severity#
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[9]/p/span
# //*[@id="cve-tabs-pane-1"]/div/div[2]/h5[2]/a # CVSS3 #
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[10]/p/strong  #Base Score#
# ...
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[14]/p/strong #Severity#
# //*[@id="cve-tabs-pane-1"]/div/div[2]/div[14]/p/strong
    CveNumber = ''
    try:
        CveNumber = Driver.find_element_by_xpath('//*[@id="__next"]/div/div[3]/div/div/div/h1').text
    except:
        print('Error link CVE Plugin')
        return str(url).replace('https://www.tenable.com/cve/',''), '404 Page Not Found', \
               'https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/' + \
               str(url).replace('https://www.tenable.com/cve/',''), '', '', '', '', '', '', ''
    print('CveNumber: ' + str(url).replace('https://www.tenable.com/cve/',''))
    CveDescription = ''
    try:
        CveDescription = Driver.find_element_by_xpath('//*[@id="cve-tabs-pane-1"]/div/div[1]/p[1]').text
        print('CveDescription: ' + CveDescription)
    except:
        print("END of Reading a CveDescription")
    CveRef = ''
    try:
        CveRef = Driver.find_element_by_xpath('//*[@id="cve-tabs-pane-1"]/div/div[1]/p[2]/a').get_attribute('href')
        print('CveRef: ' + CveRef)
    except:
        print("END of Reading a CveRef")
    CweType = ''
    try:
        CweName = Driver.find_element_by_xpath('//*[@id="cve-tabs-pane-1"]/div/div[2]/div[4]/p/span/a').text
        CweLink = Driver.find_element_by_xpath('//*[@id="cve-tabs-pane-1"]/div/div[2]/div[4]/p/span/a').get_attribute('href')
        print('CWE Type: ' + CweName + ': ' + CweLink)
        CweType = CweName + ': ' + CweLink
    except:
        print("END of Reading a CweType")
    Cvss2 = ''
    try:
        Cvss2 = Driver.find_element_by_xpath('//*[@id="cve-tabs-pane-1"]/div/div[2]/h5[1]/a').get_attribute('href')
    except:
        print("END of Reading a Cvss2")
    print('CVSS2: ' + Cvss2)
    InfoCvss2Name = ['BaseScore', 'Vector', 'ImpactScore', 'ExploitabilityScore', 'Severity']
    InfoCvss2Data = []
    InfoData = ' '
    for i in range(0, len(InfoCvss2Name)):
        try:
            InfoData = Driver.find_element_by_xpath('//*[@id="cve-tabs-pane-1"]/div/div[2]/div[' + str(i+5) + ']/p/span').text
            print(InfoCvss2Name[i] + '  ' + InfoData)
            InfoCvss2Data.append(InfoData)
        except:
            print("END of Reading a InfoCvss2Data")
            InfoCvss2Data = [' ', ' ', ' ', ' ', ' ']
            break
    time.sleep(2)
    return CveNumber, CveDescription, CveRef, CweType, Cvss2, \
           str(InfoCvss2Data[0]), str(InfoCvss2Data[1]), str(InfoCvss2Data[2]),\
           str(InfoCvss2Data[3]), str(InfoCvss2Data[4])


def putCveTenableDetailtoSql(df):
    df.to_sql(TableName, con=conn, if_exists='replace')


def CreateDetailsCve(tablename_read, tablename_write):
    # Find CVE from __Detail that list in each a Product
    query1 = "select * from "+ tablename_read + "Details_" + MonthName + ";"
    df1 = pd.read_sql_query(query1, conn)
    St0 = []
    for i in range(0, len(df1)):
        St0.extend(str(df1['CVE_Number'].get(i)).split(', '))
    St0 = list(dict.fromkeys(St0))
    print('\nCVE from ' + tablename_read +"Details_" + MonthName + ': ' + str(St0))
    query2 = "select * from CveTenableDetail_" + MonthName + ";"
    DF_all = pd.read_sql_query(query2, conn)
    df = pd.DataFrame(columns=['CveNumber', 'CveDescription', 'CveRef', 'CweType',
                               'Cvss2', 'BaseScore', 'Vector', 'ImpactScore',
                               'ExploitabilityScore', 'Severity'])
    for cve in St0:
        if len(DF_all.loc[DF_all['CveNumber'].str.contains(cve)]) > 0:
            df = df.append(DF_all.loc[DF_all['CveNumber'].str.contains(cve)], ignore_index=True)
        else:
            print('Not found CVE: ' + cve)
    print('Write CVE DataFrame to ' + tablename_write + "Details_" + MonthName + ' Table')
    df.to_sql(tablename_write, con=conn, if_exists='replace', index=False)


def getMicrosoftCveDetail():
    time.sleep(5)
    CveName = ''
    try:
        st = Driver.find_element_by_xpath('//*[@id="JelloWrapper"]/div[3]/div[2]/div/ui-view/div[2]/h2').text
        if '|' in st:
            name1, name2 = str(st).split('|')
            name = str(name2).strip()
        else:
            name = st
        CveName = name
        print('CVE Name: ' + CveName)
    except:
        print('Error Read Title Name')
    Description = ''
    for i in range(1, 5):
        try:
            Des = Driver.find_element_by_xpath(
                '//*[@id="JelloWrapper"]/div[3]/div[2]/div/ui-view/div[2]/div[1]/div[2]/p[' + str(i) + ']').text
            Description += Des
        except:
            break
    print('Cve Description :' + Description)
    AttackScenario = ''
    # for j in range(1, 4):
    #     try:
    #         Scenario = Driver.find_element_by_xpath(
    #             '//*[@id="JelloWrapper"]/div[3]/div[2]/div/ui-view/div[2]/div[1]/div[2]/ul/li[' + str(j) + ']').text
    #         AttackScenario += Scenario
    #     except:
    #         break
    Affected = []
    for k in range(1, 110):
        try:
            AffectProduct = Driver.find_element_by_xpath(
                '//*[@id="JelloWrapper"]/div[3]/div[2]/div/ui-view/div[2]/table[2]/tbody[' + str(
                    k) + ']/tr[1]/td[1]').text
            AffectOS = Driver.find_element_by_xpath(
                '//*[@id="JelloWrapper"]/div[3]/div[2]/div/ui-view/div[2]/table[2]/tbody[' + str(
                    k) + ']/tr[1]/td[2]').text
            Affected.append(AffectProduct + ' ' + AffectOS)
        except:
            break
    print('Affected :' + str(Affected))
    time.sleep(2)
    return CveName, Description, Affected  # AttackScenario, Affected


def putCvetoSql(df):
    TableName = 'CveDetails_' + MonthName
    print('\ncreate all of CVE Description to the ' + TableName + ' Table\n')
    df.to_sql(TableName, con=conn, if_exists='replace')
    return TableName


def getkeywords():
    # test to extract data from column in KeyWords Table
    # Severity , KeyWord
    query1 = "select * from KeyWords;"
    dfkeywords = pd.read_sql_query(query1, conn)
    # Keywords = []
    # range(len(df_KeyWords['KeyWord'],0))
    # When find and update Severity each record. The KeyWords can change Severity to high>medium>low
    # range(0,len(df_KeyWords['KeyWord']))
    # When find and update Severity each record. The KeyWords can change Severity to low>medium>high
    for i in range(0, len(dfkeywords['KeyWord'])):
        # print(df_KeyWords['KeyWord'].get(i))
        KeyWords.append(dfkeywords['Severity'].get(i) + '&' + dfkeywords['KeyWord'].get(i))
    print('\nAll KeyWords: ' + str(KeyWords))
    # return Keywords


def findtextandupdate():
    # test to extract data from column in CveDetails Table
    # CveNo , CveName , CveDescription , AttackScenario , Affected , Severity
    query2 = "select * from " + "CveDetails_" + MonthName + ";"
    Df_cvedetails = pd.read_sql_query(query2, conn)
    print(Df_cvedetails)
    row = []
    Severity = []
    Keyword = []
    Cveno = []
    CveDescription = []
    print('\nfind keywords in CVE Description and RiskRating')
    for word in KeyWords:
        severity, keyword = str(word).split('&')
        # this line DataFrame df_CveDetails Change in Severity Column
        Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'Severity'] = severity
        print('keyword: "' + keyword + '" => ' + severity)
        # print(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'index'].get(0)))
        # print(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'CveNo'].get(0)))
        # print(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'index'].get(1)))
        # print(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'CveNo'].get(1)))
        for i in range(0, len(Df_cvedetails)):
            if 'None' != str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'index'].get(i)):
                row.append(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'index'].get(i)))
                Severity.append(severity)
                Keyword.append(keyword)
                Cveno.append(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'CveNo'].get(i)))
                CveDescription.append(str(Df_cvedetails['CveDescription'].get(i)))
            else:
                row.append(str(Df_cvedetails['index'].get(i)))
                Severity.append('')
                Keyword.append('')
                Cveno.append(str(Df_cvedetails['CveNo'].get(i)))
                CveDescription.append(str(Df_cvedetails['CveDescription'].get(i)))

    df_ratting = pd.DataFrame({
        'row': row,
        'Severity': Severity,
        'KeyWord': Keyword,
        'CveNo': Cveno,
        'CveDescription': CveDescription
    })
    return df_ratting, Df_cvedetails


def createriskrating():
    tablename = 'RiskRating_' + MonthName
    print('\nput data of RiskRating to the SQL Table')
    df_Ratting.to_sql(tablename, con=conn, if_exists='replace')
    return tablename


def updatecvedetails():
    tablename = 'CveDetails(2)_' + MonthName
    print('\nUpdate approximate data of RiskRating to the SQL Table')
    Df_cvedetails.to_sql(tablename, con=conn, if_exists='replace', index=False)


def KeyWordGroupCveNo(TableNameRiskRating, MonthName):
    # test to group same data from column in RiskRating Table
    # and create new data in "KeyWordGroupByCveNo" Table
    # Severity , Keyword , CveNo
    query = "select * from " + TableNameRiskRating + ";"
    df_all = pd.read_sql_query(query, conn)
    print(df_all.groupby(['CveNo', 'Severity', 'KeyWord', 'CveDescription']).size().reset_index(name='counts'))
    # ".reset_index(name='counts')" at the end change the grouping object to column and the column can drop
    df_Ratting = df_all.groupby(['CveNo', 'Severity', 'KeyWord', 'CveDescription']).size().reset_index(name='counts')
    df_Ratting = df_Ratting.drop(labels='counts', axis=1)
    # df_Ratting is DataFrame After "groupby" change
    TableName = 'KeyWordGroupCveNo_' + MonthName
    df_Ratting.to_sql(TableName, con=conn, if_exists='replace')
    return TableName


######### ######### MAIN ######### #########
if __name__ == '__main__':
    User_Agent = ''
    conn = sqlite3.connect('svdata.sqlite3')
    MonthName = 'July2020'
    ######### find the last acknowledgement data #########
    Month_Name = getAcknowledgedCve()
    MonthName = str(Month_Name).replace(' ', '')
    ######### find Microsoft KB Plugin #########
    Driver = initUserAgent(User_Agent)
    SearchName = Month_Name + ' Security Update'
    TableName = 'KbPluginLink_' + MonthName
    print("\nSearch a Microsoft Bulletins Family Tenable Plugin")
    SearchPlugin(SearchName, TableName)
    ######### find SharePoint Plugin #########
    SearchName = 'SharePoint Server (' + Month_Name + ')'
    TableName = 'SharePointPluginLink_' + MonthName
    print("\nSearch a SharePoint Tenable Plugin")
    SearchPlugin(SearchName, TableName)
    ######### find Microsoft Office Plugin #########
    SearchName = 'Microsoft Office Products (' + Month_Name + ')'
    TableName = 'OfficePluginLink_' + MonthName
    print("\nSearch a Microsoft Office Tenable Plugin")
    SearchPlugin(SearchName, TableName)
    ######### find Internet Explorer Plugin #########
    SearchName = 'Internet Explorer (' + Month_Name + ')'
    TableName = 'IEPluginLink_' + MonthName
    print("\nSearch a Internet Explorer Tenable Plugin")
    SearchPlugin(SearchName, TableName)
    ######### get Microsoft KB Link #########
    TableName = 'KbPluginLink_'
    print('\nget Tenable KB Plugin Link')
    KbLink = getPluginLink(TableName)
    ######### get SharePoint Link #########
    TableName = 'SharePointPluginLink_'
    print('\nget Microsoft SharePoint Plugin Link')
    SharePointLink = getPluginLink(TableName)
    ######### get Microsoft Office Link #########
    TableName = 'OfficePluginLink_'
    print('\nget Microsoft Office Plugin Link')
    MSOfficeLink = getPluginLink(TableName)
    ######### get Internet Explorer Link #########
    TableName = 'IEPluginLink_'
    print('\nget Internet Explorer Plugin Link')
    IELink = getPluginLink(TableName)
    ######### find Microsoft Bulletins Description in Tenable Plugin #########
    print("\nget Description in Tenable Plugin")
    df = pd.DataFrame(columns=['Product_Name', 'KB_Number', 'Update', 'CVE_Detail', 'CVE_Number', 'Severity'])
    for url in KbLink:
        print('\nReading KB data: ' + url)
        ProductName, KbNumber, Update, CveDetail, CveNumber = getPluginDetail(url)
        df = df.append({
            'Product_Name': ProductName,
            'KB_Number': KbNumber,
            'Update': Update,
            'CVE_Detail': CveDetail,
            'CVE_Number': CveNumber,
            'Severity': ''
        }, ignore_index=True)
    TableName = 'KbDetails_' + MonthName
    print('put Kb Detail to Sql in ' + TableName + ' Table')
    putDFToSql(df, TableName)
    ######### find Microsoft SharePoint Description in Tenable Plugin #########
    df = pd.DataFrame(columns=['Product_Name', 'KB_Number', 'Update', 'CVE_Detail', 'CVE_Number', 'Severity'])
    for url in SharePointLink:
        print('\nReading SharePoint data: ' + url)
        ProductName, KbNumber, Update, CveDetail, CveNumber = getPluginDetail(url)
        df = df.append({
            'Product_Name': ProductName,
            'KB_Number': KbNumber,
            'Update': Update,
            'CVE_Detail': CveDetail,
            'CVE_Number': CveNumber,
            'Severity': ''
        }, ignore_index=True)
    TableName = 'SharePointDetails_' + MonthName
    print('put Kb Detail to Sql in ' + TableName + ' Table')
    putDFToSql(df, TableName)
    ######### find Microsoft Office Description in Tenable Plugin #########
    df = pd.DataFrame(columns=['Product_Name', 'KB_Number', 'Update', 'CVE_Detail', 'CVE_Number', 'Severity'])
    for url in MSOfficeLink:
        print('\nReading Office data: ' + url)
        ProductName, KbNumber, Update, CveDetail, CveNumber = getPluginDetail(url)
        df = df.append({
            'Product_Name': ProductName,
            'KB_Number': KbNumber,
            'Update': Update,
            'CVE_Detail': CveDetail,
            'CVE_Number': CveNumber,
            'Severity': ''
        }, ignore_index=True)
    TableName = 'OfficeDetails_' + MonthName
    print('put Kb Detail to Sql in ' + TableName + ' Table')
    putDFToSql(df, TableName)
    ######### find Internet Explorer Description in Tenable Plugin #########
    df = pd.DataFrame(columns=['Product_Name', 'KB_Number', 'Update', 'CVE_Detail', 'CVE_Number', 'Severity'])
    for url in IELink:
        print('\nReading Internet Explorer data: ' + url)
        ProductName, KbNumber, Update, CveDetail, CveNumber = getPluginDetail(url)
        df = df.append({
            'Product_Name': ProductName,
            'KB_Number': KbNumber,
            'Update': Update,
            'CVE_Detail': CveDetail,
            'CVE_Number': CveNumber,
            'Severity': ''
        }, ignore_index=True)
    TableName = 'IEDetails_' + MonthName
    print('put Kb Detail to Sql in ' + TableName + ' Table')
    putDFToSql(df, TableName)
    ######### find All CVE from (All)__Detail that list in each a Product #########
    CveNumbers = getAllCveNumber()
    ######### find CVE Description in Tenable CVE Link #########
    TenableCveLinks = []
    for i in range(0,len(CveNumbers)):
        TenableCveLinks.append('https://www.tenable.com/cve/' + CveNumbers[i])
    df = pd.DataFrame(
        columns=['CveNumber', 'CveDescription', 'CveRef', 'CweType', 'Cvss2',
                 'BaseScore', 'Vector', 'ImpactScore',
                 'ExploitabilityScore', 'Severity'])
    for url in TenableCveLinks:
        print('Read CveDetail in Url :' + str(url))
        CveNumber, CveDescription, CveRef, CweType, Cvss2, BaseScore, Vector, \
            ImpactScore, ExploitabilityScore, Severity = getTenableCveDetail(url)
        df = df.append({
            'CveNumber': CveNumber,
            'CveDescription': CveDescription,
            'CveRef': CveRef,
            'CweType': CweType,
            'Cvss2': Cvss2,
            'BaseScore': BaseScore,
            'Vector': Vector,
            'ImpactScore': ImpactScore,
            'ExploitabilityScore': ExploitabilityScore,
            'Severity': Severity
        }, ignore_index=True)
    TableName = 'CveTenableDetail_' + MonthName
    putCveTenableDetailtoSql(df)
    Driver.close()
    ######### find CVE Description in Tenable CVEDetail #########
    CreateDetailsCve('Kb', 'ServerCve')
    CreateDetailsCve('Kb', 'ClientCve')
    CreateDetailsCve('SharePoint', 'SharePointCve')
    CreateDetailsCve('Office', 'OfficeCve')
    CreateDetailsCve('IE', 'IECve')
    ######### ######### get Microsoft CVE Detail ######### #########
    MicrosoftCveLinks = []
    for i in range(0,len(CveNumbers)):
        MicrosoftCveLinks.append('https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/' + CveNumbers[i])
    df = pd.DataFrame(columns=['CveNo', 'CveName', 'CveDescription', 'AttackScenario', 'Affected', 'Severity'])
    round = 0
    Driver = initUserAgent(User_Agent) # 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0')
    # round_max = random.randint(9, 15)
    round_max = 150
    for url in MicrosoftCveLinks:
        print('\nReading CVE Data form Microsoft advisory:')
        print(url)
        if round < round_max:
            round += 1
            Driver.get(url)
            time.sleep(2)
            Driver.refresh()
        else:
            round = 1
            # round_max = random.randint(9, 15)
            round_max = 150
            Driver = initUserAgent(User_Agent) # 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0')
            Driver.get(url)
            time.sleep(2)
            Driver.refresh()
        CveNo = str(url).replace('https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/', '')
        print('CVE Number: ' + CveNo)
        CveName, Description, Affected = getMicrosoftCveDetail() # AttackScenario, Affected = getMicrosoftCveDetail()
        df = df.append({
            'CveNo': CveNo,
            'CveName': CveName,
            'CveDescription': Description,
            # 'AttackScenario': AttackScenario,
            'Affected': str(Affected).strip('[]').replace("'",''),
            'Severity': ''
        }, ignore_index=True)
    TableName = putCvetoSql(df)
    Driver.close()
    # ######### ######### get Lost Microsoft CVE Detail ######### #########
    # query = "select * from CveDetails_" + MonthName + ";"
    # df_cve = pd.read_sql_query(query, conn)
    # LostCveNumbers = getLostCveNumbers()
    # while len(LostCveNumbers) > 0:
    #     MicrosoftCveLinks = []
    #     for i in range(0,len(LostCveNumbers)):
    #         MicrosoftCveLinks.append('https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/' + LostCveNumbers[i])
    #     # df = pd.DataFrame(columns=['CveNo', 'CveName', 'CveDescription', 'AttackScenario', 'Affected', 'Severity'])
    #     round = 0
    #     Driver = initUserAgent(User_Agent) # 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0')
    #     # round_max = random.randint(9, 15)
    #     round_max = 150
    #     for url in MicrosoftCveLinks:
    #         print('\nReading CVE Data form Microsoft advisory:')
    #         print(url)
    #         if round < round_max:
    #             round += 1
    #             Driver.get(url)
    #             time.sleep(2)
    #             Driver.refresh()
    #         else:
    #             round = 1
    #             # round_max = random.randint(9, 15)
    #             round_max = 150
    #             Driver = initUserAgent(User_Agent) # 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0')
    #             Driver.get(url)
    #             time.sleep(2)
    #             Driver.refresh()
    #         CveNo = str(url).replace('https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/', '')
    #         print('CVE Number: ' + CveNo)
    #         CveName, Description, Affected = getMicrosoftCveDetail() # AttackScenario, Affected = getMicrosoftCveDetail()
    #         for i in range(0, len(df_cve)):
    #             if str(df_cve['CveName'].get(i)) == '':
    #                 df_cve['CveName'][i] = str(CveName)
    #                 df_cve['CveDescription'][i] = str(Description)
    #                 df_cve['Affected'][i] = str(Affected).strip('[]').replace("'",'')
    #             print(df_cve['CveNo'].get(i))
    #             print(df_cve['CveName'].get(i))
    #             print(df_cve['CveDescription'].get(i))
    #             print(str(df_cve['Affected'].get(i)))
    #             break
    #
    #         # df = df.append({
    #         #     'CveNo': CveNo,
    #         #     'CveName': CveName,
    #         #     'CveDescription': Description,
    #         #     # 'AttackScenario': AttackScenario,
    #         #     'Affected': str(Affected).strip('[]').replace("'",''),
    #         #     'Severity': ''
    #         # }, ignore_index=True)
    #     # TableName = putCvetoSql(df)
    #     Driver.close()
    #     LostCveNumbers = getLostCveNumbers()
    ######### ###### find text and update ###### #########
    KeyWords = []
    getkeywords()
    df_Ratting, Df_cvedetails = findtextandupdate()
    TableNameRiskRating = createriskrating()
    updatecvedetails()
    ######### ###### KeyWord Group By CVE ###### #########
    TableNameKeyWordGroupCveNo = KeyWordGroupCveNo(TableNameRiskRating, MonthName)
