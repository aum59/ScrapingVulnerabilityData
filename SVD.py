import time
import sqlite3
import random
import pandas as pd
from pandas import ExcelWriter
from selenium import webdriver


from selenium.webdriver.chrome.options import Options


def initUserAgent(user_agent):
    user_agent_list = [
        # Chrome
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        # 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        # 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36',
        # Firefox on Desktop User Agents
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:78.0) Gecko/20100101 Firefox/78.0'
        # 'Mozilla/5.0 (X11; Linux i686; rv:78.0) Gecko/20100101 Firefox/78.0',
        # 'Mozilla/5.0 (Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0',
        # 'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:78.0) Gecko/20100101 Firefox/78.0',
        # 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0',
        # 'Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0'
    ]
    # Pick a random user agent
    if user_agent == '':
        userAgent = random.choice(user_agent_list)
    else:
        userAgent = user_agent
    options = Options()
    print('userAgent: ' + userAgent)
    options.add_argument(f'user-agent={userAgent}')
    driverpath = 'D:/.../.../Python3 WorkShop/ScrapingVulnerabilityData/chromedriver_win32(ver84)/chromedriver.exe'
    driver = webdriver.Chrome(chrome_options=options, executable_path=driverpath)
    return driver


def getAcknowledgedCve():
    url_Acknowledgement = 'https://portal.msrc.microsoft.com/en-us/security-guidance/acknowledgments'
    print('\nfind the last acknowledgement data :' + url_Acknowledgement)
    Driver = initUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0')
    Driver.get(url_Acknowledgement)
    time.sleep(2)
# sample data
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[2]/td[1] #name#
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[2]/td[2]/a #link#
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[3]/td[1] #name#
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[3]/td[2]/a #link#
#   ... ( tr[1] is last acknowledgment )
# //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[113]/td[2]/a
#
# //*[@id="acknowledgment-table-tbody"]/tr[2]/td/table/tbody/tr[3]/td[2]/a
# //*[@id="acknowledgment-table-tbody"]/tr[2]/td/table/tbody/tr[4]/td[2]/a
#   ... ( tr[2] was old acknowledgment )
# //*[@id="acknowledgment-table-tbody"]/tr[2]/td/table/tbody/tr[111]/td[2]/a
    Acknowledgment_For = ' '
    try:
        # //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[1]/td/strong
        # //*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[1]/td/strong
        Acknowledgment_For = Driver.find_element_by_xpath('//*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr[1]/td/strong').text
        print('Acknowledgment ' + Acknowledgment_For)
    except:
        print("Error link Acknowledgment.")
    Month_Name = Acknowledgment_For
    MonthName = str(Acknowledgment_For).replace(' ', '')
    TableName = 'Acknowledgment_' + MonthName
    Acknowledgment = []
    xpath_acknowledgment = '//*[@id="acknowledgment-table-tbody"]/tr[1]/td/table/tbody/tr['
    for k in range(1, 150):
        try:
            CveNumber = Driver.find_element_by_xpath(xpath_acknowledgment + str(k+1) + ']/td[2]/a').text
            CveName = Driver.find_element_by_xpath(xpath_acknowledgment + str(k+1) + ']/td[1]').text
            # Char '&' in string can push a data after that in to next column of the DataFrame
            CveName = str(CveName).replace(' & ', ' ')
            CveLink = Driver.find_element_by_xpath(xpath_acknowledgment + str(k+1) + ']/td[2]/a').get_attribute('href')
            print(str(k) + '.) ' + CveNumber +'  '+ CveName)
            print('    ' + CveLink)
            # pack 3 detail data and add in list
            Acknowledgment.append(CveNumber + '&' + CveName + '&' + CveLink)
        except:
            print("END of last Acknowledgment.")
            break
    df = pd.DataFrame(columns=['CveNumber', 'CveName', 'CveLink'])
    for i in range(0, len(Acknowledgment)):
        # split a data list to new list
        Acknowledgments = str(Acknowledgment[i]).split('&')
        # add 3 data in a new list in to data frame
        df = df.append({
            'CveNumber': Acknowledgments[0],
            'CveName': Acknowledgments[1],
            'CveLink': Acknowledgments[2]
        }, ignore_index=True)
    time.sleep(2)
    df.to_sql(TableName, con=conn, if_exists='replace')
    Driver.close()
    return Month_Name


def SearchPlugin(searchname, tablename):
    url = 'https://www.tenable.com/plugins/nessus/families/Windows%20%3A%20Microsoft%20Bulletins'
    Driver.get(url)
    time.sleep(2)
    # print('Url :' + url)
    # sample data
    # //*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[1]/td[2] #name#
    # //*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[1]/td[1]/a #link#
    # ...
    # //*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[2]/td[2] #name#
    # //*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[2]/td[1]/a #link#
    # ...
    df = pd.DataFrame(columns=['PluginName', 'PluginLink'])
    for k in range(1, 30):
        try:
            plugin_name = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[' + str(k) + ']/td[2]')\
                .text
            plugin_link = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/section[2]/table/tbody/tr[' + str(k) + ']/td[1]/a')\
                .get_attribute(
                'href')
            if searchname in plugin_name:
                print('PluginName: ' + plugin_name)
                print('PluginLink: ' + plugin_link)
                df = df.append({
                    'PluginName': plugin_name,
                    'PluginLink': plugin_link
                }, ignore_index=True)
        except:
            print("END of Search Plugin")
            break
    time.sleep(2)
    df.to_sql(tablename, con=conn, if_exists='replace')


def getPluginLink(tablename):
    query = "select * from " + tablename + MonthName + ";"
    df_all = pd.read_sql_query(query, conn)
    Link = []
    for i in range(0, len(df_all['PluginLink'])):
        Link.append(df_all['PluginLink'].get(i))
    print(str(Link))
    return Link


def getPluginDetail(url):
    Driver.get(url)
    time.sleep(3)
# sample data
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span[4] #Des.#
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span[5] #Des.#
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span[6] #Des.#
# ...
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span[153] #Des.#
#
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/section[1]/p/span[1]/a
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/section[1]/p/span[2]/a
# ...
# //*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/section[1]/p/span[100]/a
    ProductName = ''
    try:
        st = Driver.find_element_by_xpath('//*[@id="__next"]/div/div[3]/div/div/div/h1').text
        if ':' in st:
            name1, name2 = str(st).split(': ')
            name = str(name2).replace(' Security Update', '').replace(' ' + Month_Name, '')
        else:
            name = str(st).replace('Security Updates for ', '').replace(' (' + Month_Name +')', '')
        ProductName = name
        print('Product Name: ' + ProductName)
    except:
        print("Error Reading ProductName")
    CveDetail = ''
    for k in range(1, 200):
        try:
            cvedescript = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/div/div/div[1]/section[2]/span['
                + str(k) + ']').text
            CveDetail += cvedescript + '\n'
        except:
            print("End Reading CveDetail")
            break
    # print('All CVE Description:')
    # print(CveDetail)
    CveNumber = []
    for k in range(1, 150):
        try:
            cveno = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/section[1]/p/span['
                + str(k) + ']/a').text
            CveNumber.append(cveno)
        except:
            print("End Reading CveNumber")
            break
    print('all CVE is: ' + str(CveNumber))
    KbNumber = []
    for k in range(1, 10):
        try:
            kbnum = Driver.find_element_by_xpath(
                '//*[@id="__next"]/div/div[3]/div/div/div/div/div[2]/section[5]/div/section[1]/p/span['
                + str(k) + ']/a').text
            KbNumber.append('KB'+ kbnum)
        except:
            print("End Reading KbNumber")
            break
    print('all BK is: ' + str(KbNumber))
    UpDate = []
    for kbnum in KbNumber:
        update = 'https://www.catalog.update.microsoft.com/Search.aspx?q=' + kbnum
        UpDate.append(update)
    print('all Update is:' + str(UpDate))
    time.sleep(2)
    return ProductName, str(KbNumber).strip('[]').replace("'", ''), \
           str(UpDate).strip('[]').replace("'", ''), \
           CveDetail, str(CveNumber).strip('[]').replace("'", '')


def putDFToSql(df, tablename):
    df.to_sql(tablename, con=conn, if_exists='replace')


def getAllCveNumber():
    # Find All CVE from (All)Detail that list in each a Product
    filename_read = ['Kb', 'SharePoint', 'Office', 'IE']
    St0 = []
    for i in range(0, len(filename_read)):
        query = "select * from " + filename_read[i] + "Details_" + MonthName + ";"
        print('\nReading All CVE in ' + filename_read[i] + "Details_" + MonthName + ' Table')
        df1 = pd.read_sql_query(query, conn)
        for j in range(0, len(df1)):
            St0.extend(str(df1['CVE_Number'].get(j)).split(', '))
    St0 = list(dict.fromkeys(St0))
    print('\nall CVE in all Product Detail file:')
    print(str(St0).strip('[]').replace("'", '') + '\n')
    return St0


def CreateDetailsCve(tablename_read, tablename_write):
    # Find CVE from (tablename)Detail that list in each a Product
    query1 = "select * from "+ tablename_read + "Details_" + MonthName + ";"
    df1 = pd.read_sql_query(query1, conn)
    St0 = []
    for i in range(0, len(df1)):
        St0.extend(str(df1['CVE_Number'].get(i)).split(', '))
    St0 = list(dict.fromkeys(St0))
    print('\nCVE from ' + tablename_read +"Details_" + MonthName + ': ' + str(St0))
    ######### Change Data CveTenableDetail_August2020 To CveDetail(2)_August2020 #########
    query2 = "select * from CveDetails2_" + MonthName + ";"
    DF_all = pd.read_sql_query(query2, conn)
    ######### Test Change Data CveTenableDetail_August2020 To CveDetail(2)_August2020 #########
    # df = pd.DataFrame(columns=['CveNumber', 'CveDescription', 'CveRef', 'CweType',
    #                            'Cvss2', 'BaseScore', 'Vector', 'ImpactScore',
    #                            'ExploitabilityScore', 'Severity'])
    df = pd.DataFrame(columns=['CveNo', 'CveName', 'CveDescription',
                               'AttackScenario', 'Affected', 'Severity'])
    # for cve in St0:
    #     if len(DF_all.loc[DF_all['CveNumber'].str.contains(cve)]) > 0:
    #         df = df.append(DF_all.loc[DF_all['CveNumber'].str.contains(cve)], ignore_index=True)
    #     else:
    #         print('Not found CVE: ' + cve)
    for cve in St0:
        if len(DF_all.loc[DF_all['CveNo'].str.contains(cve)]) > 0:
            df = df.append(DF_all.loc[DF_all['CveNo'].str.contains(cve)], ignore_index=True)
        else:
            print('Not found CVE: ' + cve)
    print('Write CVE DataFrame to ' + tablename_write + "Details_" + MonthName + ' Table')
    df.to_sql(tablename_write, con=conn, if_exists='replace', index=False)


def getMicrosoftCveDetail():
    time.sleep(5)
    CveName = ''
    try:
        st = Driver.find_element_by_xpath('//*[@id="JelloWrapper"]/div[3]/div[2]/div/ui-view/div[2]/h2').text
        if '|' in st:
            name1, name2 = str(st).split('|')
            name = str(name2).strip()
        else:
            name = st
        CveName = name
        print('CVE Name: ' + CveName)
    except:
        print('Error Read CVE Name')
    Description = ''
    for i in range(1, 5):
        try:
            Des = Driver.find_element_by_xpath(
                '//*[@id="JelloWrapper"]/div[3]/div[2]/div/ui-view/div[2]/div[1]/div[2]/p[' + str(i) + ']').text
            Description += Des
        except:
            print('End Read CVE Description')
            break
    print('Cve Description :' + Description)
    Affected = []
    MSSeverity = []
    xpath_affected = '//*[@id="JelloWrapper"]/div[3]/div[2]/div/ui-view/div[2]/table[2]/tbody['
    for k in range(1, 110):
        try:
            AffectProduct = Driver.find_element_by_xpath(xpath_affected + str(k) + ']/tr[1]/td[1]').text
            AffectPlatform = Driver.find_element_by_xpath(xpath_affected + str(k) + ']/tr[1]/td[2]').text
            MSSeverity.append(Driver.find_element_by_xpath(xpath_affected + str(k) + ']/tr[1]/td[6]').text)
            Affected.append(AffectProduct + ' ' + AffectPlatform)
        except:
            print('End Read CVE Affected Product and Platform')
            break
    print('Affected :' + str(Affected))
    CVSSscore = []
    for k in range(0, len(Affected)):
        try:
            Driver.find_element_by_xpath('//*[@id="JelloWrapper"]/div[3]/div[2]/div/ui-view/div[2]/ul/li[2]/a').click()
            Base = Driver.find_element_by_xpath('//*[@id="AffectedProductsWithCVSS"]/tbody/tr[' + str(k + 1) + ']/td[3]/div').text
            CVSSscore.append(Base)
        except:
            print("END of CVSS Score.")
            break
    time.sleep(2)
    return CveName, Description, Affected, MSSeverity, CVSSscore


def putCvetoSql(df):
    TableName = 'CveDetails_' + MonthName
    print('\ncreate all of CVE Description to the ' + TableName + ' Table\n')
    df.to_sql(TableName, con=conn, if_exists='replace')
    return TableName


def getkeywords():
    # extract data from column in KeyWords Table
    # Severity , KeyWord
    query1 = "select * from KeyWords;"
    dfkeywords = pd.read_sql_query(query1, conn)
    Keywords = []
    # range(len(df_KeyWords['KeyWord'],0))
    # When find and update Severity each record. The KeyWords can change Severity to high>medium>low
    # range(0,len(df_KeyWords['KeyWord']))
    # When find and update Severity each record. The KeyWords can change Severity to low>medium>high
    for i in range(0, len(dfkeywords['KeyWord'])):
        # print(df_KeyWords['KeyWord'].get(i))
        Keywords.append(dfkeywords['Severity'].get(i) + '&' + dfkeywords['KeyWord'].get(i))
    print('\nAll KeyWords: ' + str(KeyWords))
    return Keywords


def findtextandupdate():
    # test to extract data from column in CveDetails Table
    # CveNo , CveName , CveDescription , Affected , Severity , CVSS
    query2 = "select * from " + "CveDetails_" + MonthName + ";"
    Df_cvedetails = pd.read_sql_query(query2, conn)
    print(Df_cvedetails)
    row = []
    Severity = []
    Keyword = []
    Cveno = []
    CveDescription = []
    print('\nfind keywords in CVE Description and RiskRating')
    for word in KeyWords:
        severity, keyword = str(word).split('&')
        # this line DataFrame df_CveDetails Change in Severity Column
        Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'Severity'] = severity
        print('keyword: "' + keyword + '" => ' + severity)
        # print(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'index'].get(0)))
        # print(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'CveNo'].get(0)))
        # print(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'index'].get(1)))
        # print(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'CveNo'].get(1)))
        for i in range(0, len(Df_cvedetails)):
            if 'None' != str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'index'].get(i)):
                row.append(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'index'].get(i)))
                Severity.append(severity)
                Keyword.append(keyword)
                Cveno.append(str(Df_cvedetails.loc[Df_cvedetails['CveDescription'].str.contains(keyword), 'CveNo'].get(i)))
                CveDescription.append(str(Df_cvedetails['CveDescription'].get(i)))
            else:
                row.append(str(Df_cvedetails['index'].get(i)))
                Severity.append('')
                Keyword.append('')
                Cveno.append(str(Df_cvedetails['CveNo'].get(i)))
                CveDescription.append(str(Df_cvedetails['CveDescription'].get(i)))

    df_ratting = pd.DataFrame({
        'row': row,
        'Severity': Severity,
        'KeyWord': Keyword,
        'CveNo': Cveno,
        'CveDescription': CveDescription
    })
    return df_ratting, Df_cvedetails


def createriskrating():
    tablename = 'RiskRating_' + MonthName
    print('\nput data of RiskRating to the SQL Table')
    df_Ratting.to_sql(tablename, con=conn, if_exists='replace')
    return tablename


def updatecvedetails():
    tablename = 'CveDetails2_' + MonthName
    print('\nUpdate approximate data of RiskRating to the SQL Table')
    Df_cvedetails.to_sql(tablename, con=conn, if_exists='replace', index=False)


def dfToExcelProblem():
    # Tab1 Server
    query1 = "select * from KbDetails_"+ MonthName +";"
    df1 = pd.read_sql_query(query1, conn)
    # Tab2 Server
    query2 = "select * from ServerCve;"
    df2 = pd.read_sql_query(query2, conn)
    # Tab1 Client
    query3 = "select * from KbDetails_"+ MonthName +";"
    df3 = pd.read_sql_query(query3, conn)
    # Tab2 Client
    query4 = "select * from ClientCve;"
    df4 = pd.read_sql_query(query4, conn)
    # Tab1 SharePoint
    query5 = "select * from SharePointDetails_"+ MonthName +";"
    df5 = pd.read_sql_query(query5, conn)
    # Tab2 SharePoint
    query6 = "select * from SharePointCve;"
    df6 = pd.read_sql_query(query6, conn)
    # Tab1 Office
    query7 = "select * from OfficeDetails_" + MonthName + ";"
    df7 = pd.read_sql_query(query7, conn)
    # Tab2 Office
    query8 = "select * from OfficeCve;"
    df8 = pd.read_sql_query(query8, conn)
    # Tab1 Internet Explorer
    query9 = "select * from IEDetails_" + MonthName + ";"
    df9 = pd.read_sql_query(query9, conn)
    # Tab2 Internet Explorer
    query10 = "select * from IECve;"
    df10 = pd.read_sql_query(query10, conn)
    filename = 'D:/aum/KKP/Python3 WorkShop/ScrapingVulnerabilityData/Excel/Server_' + MonthName + '.xlsx'
    with ExcelWriter(filename) as writer:
        df1.to_excel(writer, sheet_name='Sheet1')
        df2.to_excel(writer, sheet_name='Sheet2')
    filename = 'D:/aum/KKP/Python3 WorkShop/ScrapingVulnerabilityData/Excel/Client_' + MonthName + '.xlsx'
    with ExcelWriter(filename) as writer:
        df3.to_excel(writer, sheet_name='Sheet3')
        df4.to_excel(writer, sheet_name='Sheet4')
    filename = 'D:/aum/KKP/Python3 WorkShop/ScrapingVulnerabilityData/Excel/SharePoint_' + MonthName + '.xlsx'
    with ExcelWriter(filename) as writer:
        df5.to_excel(writer, sheet_name='Sheet5')
        df6.to_excel(writer, sheet_name='Sheet6')
    filename = 'D:/aum/KKP/Python3 WorkShop/ScrapingVulnerabilityData/Excel/Office_' + MonthName + '.xlsx'
    with ExcelWriter(filename) as writer:
        df7.to_excel(writer, sheet_name='Sheet7')
        df8.to_excel(writer, sheet_name='Sheet8')
    filename = 'D:/aum/KKP/Python3 WorkShop/ScrapingVulnerabilityData/Excel/IE_' + MonthName + '.xlsx'
    with ExcelWriter(filename) as writer:
        df9.to_excel(writer, sheet_name='Sheet9')
        df10.to_excel(writer, sheet_name='Sheet10')


######### ######### MAIN ######### #########
if __name__ == '__main__':
    User_Agent = ''
    conn = sqlite3.connect('svdata.sqlite3')
    # MonthName = 'October2020'
    # ######### find the last acknowledgement data #########
    Month_Name = getAcknowledgedCve()
    # Change string format to no space like this 'October2020' and use in a Table Name
    MonthName = str(Month_Name).replace(' ', '')
    ######### find Microsoft KB Plugin in the www.tenable.com #########
    Driver = initUserAgent(User_Agent)
    SearchName = Month_Name + ' Security Update'
    TableName = 'KbPluginLink_' + MonthName
    print("\nSearch a Microsoft Bulletins Family Tenable Plugin")
    SearchPlugin(SearchName, TableName)
    ######### find SharePoint 2010 Plugin in the www.tenable.com #########
    SearchName = 'SharePoint Server 2010 (' + Month_Name + ')'
    TableName = 'SharePointPluginLink_' + MonthName
    print("\nSearch a SharePoint Server 2010 Tenable Plugin")
    SearchPlugin(SearchName, TableName)
    ######### find Microsoft Office Plugin in the www.tenable.com #########
    SearchName = 'Microsoft Office Products (' + Month_Name + ')'
    TableName = 'OfficePluginLink_' + MonthName
    print("\nSearch a Microsoft Office Tenable Plugin")
    SearchPlugin(SearchName, TableName)
    ######### find Internet Explorer Plugin in the www.tenable.com #########
    SearchName = 'Internet Explorer (' + Month_Name + ')'
    TableName = 'IEPluginLink_' + MonthName
    print("\nSearch a Internet Explorer Tenable Plugin")
    SearchPlugin(SearchName, TableName)
    ######### get Microsoft KB Plugin Link in Table #########
    TableName = 'KbPluginLink_'
    print('\nget Tenable KB Plugin Link')
    KbLink = getPluginLink(TableName)
    ######### get SharePoint 2010 Plugin Link in Table #########
    TableName = 'SharePointPluginLink_'
    print('\nget Microsoft SharePoint Plugin Link')
    SharePointLink = getPluginLink(TableName)
    ######### get Microsoft Office Plugin Link in Table #########
    TableName = 'OfficePluginLink_'
    print('\nget Microsoft Office Plugin Link')
    MSOfficeLink = getPluginLink(TableName)
    ######### get Internet Explorer Plugin Link in Table #########
    TableName = 'IEPluginLink_'
    print('\nget Internet Explorer Plugin Link')
    IELink = getPluginLink(TableName)
    ######### get Microsoft Bulletins Description in Tenable Plugin #########
    print("\nget Microsoft Bulletins Description in Tenable Plugin")
    df = pd.DataFrame(columns=['Product_Name', 'KB_Number', 'Update', 'CVE_Detail', 'CVE_Number', 'Severity'])
    for url in KbLink:
        print('\nReading Description: ' + url)
        ProductName, KbNumber, Update, CveDetail, CveNumber = getPluginDetail(url)
        df = df.append({
            'Product_Name': ProductName,
            'KB_Number': KbNumber,
            'Update': Update,
            'CVE_Detail': CveDetail,
            'CVE_Number': CveNumber,
            'Severity': ''
        }, ignore_index=True)
    TableName = 'KbDetails_' + MonthName
    print('put Kb Detail to Sql in ' + TableName + ' Table')
    putDFToSql(df, TableName)
    ######### get Microsoft SharePoint Description in Tenable Plugin #########
    print("\nget Microsoft SharePoint Description in Tenable Plugin")
    df = pd.DataFrame(columns=['Product_Name', 'KB_Number', 'Update', 'CVE_Detail', 'CVE_Number', 'Severity'])
    for url in SharePointLink:
        print('\nReading SharePoint data: ' + url)
        ProductName, KbNumber, Update, CveDetail, CveNumber = getPluginDetail(url)
        df = df.append({
            'Product_Name': ProductName,
            'KB_Number': KbNumber,
            'Update': Update,
            'CVE_Detail': CveDetail,
            'CVE_Number': CveNumber,
            'Severity': ''
        }, ignore_index=True)
    TableName = 'SharePointDetails_' + MonthName
    print('put Kb Detail to Sql in ' + TableName + ' Table')
    putDFToSql(df, TableName)
    ######### get Microsoft Office Description in Tenable Plugin #########
    print("\nget Microsoft Office Description in Tenable Plugin")
    df = pd.DataFrame(columns=['Product_Name', 'KB_Number', 'Update', 'CVE_Detail', 'CVE_Number', 'Severity'])
    for url in MSOfficeLink:
        print('\nReading Office data: ' + url)
        ProductName, KbNumber, Update, CveDetail, CveNumber = getPluginDetail(url)
        df = df.append({
            'Product_Name': ProductName,
            'KB_Number': KbNumber,
            'Update': Update,
            'CVE_Detail': CveDetail,
            'CVE_Number': CveNumber,
            'Severity': ''
        }, ignore_index=True)
    TableName = 'OfficeDetails_' + MonthName
    print('put Kb Detail to Sql in ' + TableName + ' Table')
    putDFToSql(df, TableName)
    ######### get Internet Explorer Description in Tenable Plugin #########
    print("\nget Internet Explorer Description in Tenable Plugin")
    df = pd.DataFrame(columns=['Product_Name', 'KB_Number', 'Update', 'CVE_Detail', 'CVE_Number', 'Severity'])
    for url in IELink:
        print('\nReading Internet Explorer data: ' + url)
        ProductName, KbNumber, Update, CveDetail, CveNumber = getPluginDetail(url)
        df = df.append({
            'Product_Name': ProductName,
            'KB_Number': KbNumber,
            'Update': Update,
            'CVE_Detail': CveDetail,
            'CVE_Number': CveNumber,
            'Severity': ''
        }, ignore_index=True)
    TableName = 'IEDetails_' + MonthName
    print('put Kb Detail to Sql in ' + TableName + ' Table')
    putDFToSql(df, TableName)
    ######### find All CVE from (All)__Detail that list in each a Product #########
    CveNumbers = getAllCveNumber()
    Driver.close()
    ######### ######### get Microsoft CVE Detail ######### #########
    MicrosoftCveLinks = []
    for i in range(0,len(CveNumbers)):
        MicrosoftCveLinks.append('https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/' + CveNumbers[i])
    df = pd.DataFrame(columns=['CveNo', 'CveName', 'CveDescription', 'Affected', 'Severity', 'CVSS'])
    round = 0
    Driver = initUserAgent(User_Agent) # 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0')
    round_max = 150
    for url in MicrosoftCveLinks:
        print('\nReading CVE Data form Microsoft advisory:')
        print(url)
        if round < round_max:
            round += 1
            Driver.get(url)
            time.sleep(2)
            Driver.refresh()
        else:
            round = 1
            round_max = 150
            Driver = initUserAgent(User_Agent) # 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0')
            Driver.get(url)
            time.sleep(2)
            Driver.refresh()
        CveNo = str(url).replace('https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/', '')
        print('CVE Number: ' + CveNo)
        CveName, Description, Affected, MSSeverity, CVSSscore = getMicrosoftCveDetail()
        df = df.append({
            'CveNo': CveNo,
            'CveName': CveName,
            'CveDescription': Description,
            'Affected': str(Affected).strip('[]').replace("'",''),
            'Severity': str(MSSeverity).strip('[]').replace("'",''),
            'CVSS': str(CVSSscore).strip('[]').replace("'",'')
        }, ignore_index=True)
    TableName = putCvetoSql(df)
    Driver.close()
    ######### ###### find text and update ###### #########
    KeyWords = []
    KeyWords = getkeywords()
    df_Ratting, Df_cvedetails = findtextandupdate()
    TableNameRiskRating = createriskrating()
    updatecvedetails()
    ######### find CVE Description in Tenable CVEDetail #########
    filename_read = ['Kb', 'Kb', 'SharePoint', 'Office', 'IE']
    filename_write = ['ServerCve', 'ClientCve', 'SharePointCve', 'OfficeCve', 'IECve']
    for i in range(0, len(filename_read)):
        CreateDetailsCve(filename_read[i], filename_write[i])
    ######### Write Dataframe To Excel #########
    print('Write Dataframe To Excel')
    dfToExcelProblem()
