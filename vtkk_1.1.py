import argparse
import hashlib
import re
import requests
import sys
import configparser
from pprint import pprint
from requests.adapters import HTTPAdapter
from requests_ntlm import HttpNtlmAuth


# <Class API Virustotal><python2,3>
class vtAPI():
    def __init__(self):
        self.api = 'b000a95e07c82ec6bf90990bf789c43baa47668490ad1e0cd041a9cab886c97a'
        self.base = 'http://www.virustotal.com/vtapi/v2/'

    def getReportProxy(self, session, md5):
        params = {'apikey': self.api, 'resource': md5}
        url = self.base + "file/report"
        response = session.get(url, params=params)
        return response.json()

    def getReport(self,md5):
        url = self.base + "file/report"
        params = {'apikey': self.api, 'resource': md5}
        response = requests.get(url, params=params)
        return response.json()

# </python2,3></Class API Virusstotal>

# <Print Console Report Function><Python3>
def parse3(it, md5, verbose, jsondump):
    if it['response_code'] == 0:
        print(md5 + " -- Not Found in VT")
        return 0
    print("\tResults for MD5: ", it['md5'], "\n\tDetected by: ", it['positives'], '/', it['total'])
    if 'Symantec' in it['scans']:
        print('\tSymantec Detection:', it['scans']['Symantec']['result'])
    if 'Kaspersky' in it['scans']:
        print('\tKaspersky Detection:', it['scans']['Kaspersky']['result'])
    if 'ESET-NOD32' in it['scans']:
        print('\tESET Detection:', it['scans']['ESET-NOD32']['result'])
    print('\tScanned on:', it['scan_date'], '\n')
    if jsondump == True:
        jsondumpfile = open("VTDL" + md5 + ".json", "w")
        pprint(it, jsondumpfile)
        jsondumpfile.close()
        print("\n\tJSON Written to File -- " + "VTDL" + md5 + ".json\n")

    if verbose == True:
        line = 1
        print('\tVerbose VirusTotal Information Output:')
        for x in it['scans']:
            print('\t',str(line)+')', x , '\t' if len(x.strip()) <= 9 else '',
                '\t' if len(x.strip()) <= 18 else '', '\t' if len(x.strip()) <= 27 else '',
                it['scans'][x]['detected'], '\t', it['scans'][x]['result'])
            line += 1
# </Python3></Print Console Report Function>

# <Print Console Report Function><Python2>
def parse2(it, md5, verbose, jsondump):
    if it['response_code'] == 0:
        print(md5 + "  -- Not Found in VT")
        return 0
    print("    Results for MD5: " + it['md5'])
    print("    Detected by: " + str(it['positives']) + '/' + str(it['total']))
    if 'Symantec' in it['scans']:
        print('    Symantec Detection:' + it['scans']['Symantec']['result'])
    if 'Kaspersky' in it['scans']:
        print('    Kaspersky Detection:' + it['scans']['Kaspersky']['result'])
    if 'ESET-NOD32' in it['scans']:
        print('    ESET Detection:' + it['scans']['ESET-NOD32']['result'])
    print('    Scanned on:' + it['scan_date'] + '\n')
    if jsondump == True:
        jsondumpfile = open("VTDL" + md5 + ".json", "w")
        pprint(it, jsondumpfile)
        jsondumpfile.close()
        print("    JSON Written to File -- " + "VTDL" + md5 + ".json\n")

    if verbose == True:
        line = 1
        print('    Verbose VirusTotal Information Output:')
        for x in it['scans']:
            print("\t"+str(line)+') '+x+"\t\t\t"+str(it['scans'][x]['detected'])+"\t"+str(it['scans'][x]['result']))
            line += 1
# </Python2></Print Console Report Function>

# <Md5 Function>
def checkMD5(checkval):
  if re.match(r"([a-fA-F\d]{32})", checkval) == None:
    md5 = md5sum(checkval)
    return md5.upper()
  else:
    return checkval.upper()

def md5sum(filename):
  fh = open(filename, 'rb')
  m = hashlib.md5()
  while True:
      data = fh.read(8192)
      if not data:
          break
      m.update(data)
  return m.hexdigest()
# </Md5 Function>

def main():
    opt = argparse.ArgumentParser(prog='vtkk', description="Search Hash from VirusTotal")
    opt.add_argument("HashorPath", help="Enter the MD5/SHA1/256 Hash or Path to File")
    opt.add_argument("-P", action="store_true", dest="proxy", help="Authentication Proxy NTLMv2")
    opt.add_argument("-u", dest="username", help="Enter DomainName\\Username Authentication Proxy")
    opt.add_argument("-p", dest="password", help="Enter Password Authentication Proxy")
    opt.add_argument("-s", action="store_true", dest="search", help="Search VirusTotal")
    opt.add_argument("-v", action="store_true", dest="verbose", help="Turn on verbosity of VT reports")
    opt.add_argument("-j", action="store_true", dest="jsondump", help="Dumps the full VT report to file (VTDLXXX.json)")
    opt.add_argument("-V", action="version", version="%(prog)s version 1.0")

    if len(sys.argv) <= 2:
        opt.print_help()
        sys.exit(1)
    options = opt.parse_args()
    # print opt.parse_args()  # print argument value
    vt = vtAPI()
    md5 = checkMD5(options.HashorPath)
    if options.proxy:
        user = options.username
        password = options.password
        http_proxy = 'http://10.229.1.80:80'
        proxy_dict = {'http': http_proxy, 'https': http_proxy}

        session = requests.Session()
        session.verify = False
        session.mount('http://', HTTPAdapter(max_retries=3))
        session.mount('https://', HTTPAdapter(max_retries=3))
        session.proxies = proxy_dict
        session.auth = HttpNtlmAuth(user, password)
        if options.search or options.jsondump or options.verbose:
            if sys.version_info.major == 2:
                parse2(vt.getReportProxy(session, md5), md5, options.verbose, options.jsondump)
            elif sys.version_info.major == 3:
                parse3(vt.getReportProxy(session, md5), md5, options.verbose, options.jsondump)
    else:
        if sys.version_info.major == 2:
            parse2(vt.getReport(md5), md5, options.verbose, options.jsondump)
        elif sys.version_info.major == 3:
            parse3(vt.getReport(md5), md5, options.verbose, options.jsondump)

if __name__ == '__main__':
    main()
